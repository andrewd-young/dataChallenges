[{"/Users/andrew/Documents/toLearned/src/index.js":"1","/Users/andrew/Documents/toLearned/src/reportWebVitals.js":"2","/Users/andrew/Documents/toLearned/src/App.js":"3","/Users/andrew/Documents/toLearned/src/Learn.js":"4","/Users/andrew/Documents/toLearned/src/Written.js":"5","/Users/andrew/Documents/toLearned/src/MultipleChoice.js":"6","/Users/andrew/Documents/toLearned/src/Results.js":"7","/Users/andrew/Documents/toLearned/src/Logo.js":"8","/Users/andrew/Documents/toLearned/src/Finished.js":"9","/Users/andrew/Desktop/CSML/dataChallenges/src/index.js":"10","/Users/andrew/Desktop/CSML/dataChallenges/src/App.js":"11","/Users/andrew/Desktop/CSML/dataChallenges/src/reportWebVitals.js":"12"},{"size":841,"mtime":1660423045000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1660423045000,"results":"15","hashOfConfig":"14"},{"size":7452,"mtime":1664743777309,"results":"16","hashOfConfig":"14"},{"size":2904,"mtime":1660423045000,"results":"17","hashOfConfig":"14"},{"size":2961,"mtime":1660423045000,"results":"18","hashOfConfig":"14"},{"size":4382,"mtime":1660423045000,"results":"19","hashOfConfig":"14"},{"size":2443,"mtime":1660423045000,"results":"20","hashOfConfig":"14"},{"size":3769,"mtime":1660423045000,"results":"21","hashOfConfig":"14"},{"size":2144,"mtime":1660423045000,"results":"22","hashOfConfig":"14"},{"size":841,"mtime":1660423045000,"results":"23","hashOfConfig":"24"},{"size":4821,"mtime":1667355282968,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1660423045000,"results":"26","hashOfConfig":"24"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"llwj4t",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lzgztu",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrew/Documents/toLearned/src/index.js",[],[],[],"/Users/andrew/Documents/toLearned/src/reportWebVitals.js",[],[],"/Users/andrew/Documents/toLearned/src/App.js",["67"],[],"/Users/andrew/Documents/toLearned/src/Learn.js",["68"],[],"import MultipleChoice from \"./MultipleChoice\";\nimport Written from \"./Written\";\nimport Results from \"./Results\";\nimport Finished from \"./Finished\";\nimport {useState} from \"react\";\nimport {Fireworks} from \"@fireworks-js/react\";\nimport PreviousMap from \"postcss/lib/previous-map\";\n\nlet progress = 0;\n\nexport default function Learn(props) {\n\tlet termsArray = props.terms;\n\tlet [wordCounter, setCounter] = useState(1);\n\tlet questionSeed = Math.random();\n\tlet finishedSet = true;\n\n\tlet setLearnCounter = () => {\n\t\tsetCounter(wordCounter + 1);\n\n\t\twhile (!finishedSet && termsArray[Math.floor(questionSeed * termsArray.length)][2] === 3) {\n\t\t\tquestionSeed = Math.random();\n\t\t}\n\n\t\tquestionElement = termsArray[Math.floor(Math.random() * termsArray.length)][2] === 0 ? <MultipleChoice terms={termsArray} questionSeed={questionSeed} setLearnCounter={setLearnCounter} /> : <Written terms={termsArray} questionSeed={questionSeed} setLearnCounter={setLearnCounter} />;\n\t};\n\n\t// check if all 3rd slots in termsArray are 3 and if so set finishedSet to true\n\tfor (let i = 0; i < termsArray.length; i++) {\n\t\tif (termsArray[i][2] !== 3) {\n\t\t\tfinishedSet = false;\n\t\t}\n\t}\n\n\tlet sum = 0;\n\tfor (let i = 0; i < termsArray.length; i++) {\n\t\tsum += termsArray[i][2];\n\t}\n\tprogress = (sum / (termsArray.length * 3)) * 100;\n\n\tlet questionElement = termsArray[Math.floor(Math.random() * termsArray.length)][2] === 0 ? <MultipleChoice terms={termsArray} questionSeed={questionSeed} setLearnCounter={setLearnCounter} /> : <Written terms={termsArray} questionSeed={questionSeed} setLearnCounter={setLearnCounter} />;\n\n\treturn (\n\t\t<div className=\"space-y-5 mx-auto my-auto w-3/4 h-3/4\">\n\t\t\t{finishedSet && (\n\t\t\t\t<Fireworks\n\t\t\t\t\toptions={{opacity: 0.5}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\theight: \"100%\",\n\t\t\t\t\t\tposition: \"fixed\",\n\t\t\t\t\t\tzIndex: -1,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<div className=\"mt-12 grid\">\n\t\t\t\t<p className=\"text-base dark:text-slate-400 text-right\">{Math.floor(progress)}%</p>\n\t\t\t\t<div className=\"bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n\t\t\t\t\t<div className=\"bg-blue-600 h-2.5 w-45 rounded-full\" style={{width: progress + \"%\"}}></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div id=\"cardOverlay\"></div>\n\t\t\t\t{wordCounter % 10 !== 0 && !finishedSet && questionElement}\n\t\t\t\t{wordCounter % 10 === 0 && !finishedSet && <Results terms={termsArray} setLearnCounter={setLearnCounter}></Results>}\n\t\t\t\t{finishedSet && <Finished terms={termsArray} setLearnCounter={setLearnCounter} setAppInput={props.setAppInput}></Finished>}\n\t\t\t</div>\n\t\t\t{!finishedSet && (\n\t\t\t\t<p className=\"text-base dark:text-slate-400\">\n\t\t\t\t\tPress <kbd className=\"px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500\">Enter</kbd> to {wordCounter !== 10 ? \"answer\" : \"continue\"}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/Users/andrew/Documents/toLearned/src/Written.js",[],[],"/Users/andrew/Documents/toLearned/src/MultipleChoice.js",["69"],[],"import {useState} from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nexport default function MultipleChoice(props) {\n\tconst termsArray = props.terms;\n\tlet answerIndex = Math.floor(props.questionSeed * termsArray.length);\n\n\t//generate an array of 3 random terms that are not at answer index\n\tlet randomTerms = [];\n\trandomTerms.push(termsArray[answerIndex]);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tlet randomIndex = Math.floor(Math.random() * termsArray.length);\n\t\twhile (randomIndex === answerIndex) {\n\t\t\trandomIndex = Math.floor(Math.random() * termsArray.length);\n\t\t}\n\t\trandomTerms.push(termsArray[randomIndex]);\n\t}\n\n\trandomTerms = randomTerms.filter((item, index) => randomTerms.indexOf(item) === index);\n\trandomTerms.length = 4;\n\n\t//shuffle randomTerms\n\tfor (let i = randomTerms.length - 1; i > 0; i--) {\n\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t[randomTerms[i], randomTerms[j]] = [randomTerms[j], randomTerms[i]];\n\t}\n\n\treturn (\n\t\t<a className=\"block bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700 space-y-5\">\n\t\t\t<div className=\"p-6\">\n\t\t\t\t<label className=\"block mb-2 text-lg font-medium text-gray-900 dark:text-gray-300\"><b>{termsArray[answerIndex][1]}</b></label>\n\t\t\t\t<ul className=\"grid gap-6 w-full md:grid-cols-2\">\n\t\t\t\t\t{randomTerms.map((term) => {\n\t\t\t\t\t\treturn <Choice potentialAnswer={term[0]} answerIndex={answerIndex} termsArray={termsArray} key={term[0]} setLearnCounter={props.setLearnCounter}></Choice>;\n\t\t\t\t\t})}\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<input checked type=\"radio\" name=\"choice\" value=\"choice-big\" className=\"peer hidden\"></input>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</a>\n\t);\n}\n\nfunction Choice(props) {\n\tconst [selected, setSelected] = useState(\"yes\");\n\n\tconst handleChange = (event) => {\n\t\tsetSelected(event.target.checked);\n\t};\n\n\tfunction eventAcceptor(e) {\n\t\tvar code = e.code;\n\t\tif (code === \"Enter\") {\n\t\t\tdocument.getElementById(\"cardOverlay\").innerHTML = \"\";\n\t\t\tdocument.removeEventListener(\"keypress\", eventAcceptor, false);\n\t\t}\n\t}\n\n\treturn (\n\t\t<li>\n\t\t\t<label\n\t\t\t\tclassName={\n\t\t\t\t\tselected\n\t\t\t\t\t\t? \"inline-flex justify-between items-center p-5 w-full text-gray-500 bg-white rounded-lg border border-gray-200 cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700\"\n\t\t\t\t\t\t: \"inline-flex justify-between items-center p-5 w-full bg-white rounded-lg border cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:text-blue-500 border-blue-600 text-blue-600 hover:text-gray-600 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{props.potentialAnswer}\n\t\t\t\t<input\n\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\tname=\"choice\"\n\t\t\t\t\tvalue=\"choice-big\"\n\t\t\t\t\tclassName=\"peer\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tchecked={selected === \"yes\"}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\tprops.setLearnCounter();\n\t\t\t\t\t\t\tif (props.potentialAnswer === props.termsArray[props.answerIndex][0]) {\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\tdocument.getElementById(\"cardOverlay\").innerHTML = \"\";\n\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\tprops.termsArray[props.answerIndex][2] = 1;\n\t\t\t\t\t\t\t\tdocument.getElementById(\"cardOverlay\").innerHTML = ReactDOMServer.renderToString(\n\t\t\t\t\t\t\t\t\t<div className=\"flex absolute w-full h-full bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700\">\n\t\t\t\t\t\t\t\t\t\t<h1 className=\"text-center m-auto text-5xl text-green-500\">\n\t\t\t\t\t\t\t\t\t\t\t<b>✅ Correct!</b>\n\t\t\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\tdocument.addEventListener(\"keypress\", eventAcceptor, false);\n\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\tdocument.getElementById(\"cardOverlay\").innerHTML = ReactDOMServer.renderToString(\n\t\t\t\t\t\t\t\t\t<div className=\"flex absolute w-full h-full bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700\">\n\t\t\t\t\t\t\t\t\t\t<h1 className=\"text-center m-auto text-5xl text-red-500\">\n\t\t\t\t\t\t\t\t\t\t\t<b>❌ Incorrect</b>\n\t\t\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-base dark:text-slate-400 m-auto\">\n\t\t\t\t\t\t\t\t\t\t\tYou said <b>{props.potentialAnswer}</b>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-base dark:text-slate-400 m-auto\">\n\t\t\t\t\t\t\t\t\t\t\tThe correct answer was <b>{props.termsArray[props.answerIndex][0]}</b>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t></input>\n\t\t\t</label>\n\t\t</li>\n\t);\n}\n","/Users/andrew/Documents/toLearned/src/Results.js",[],[],"/Users/andrew/Documents/toLearned/src/Logo.js",[],[],"/Users/andrew/Documents/toLearned/src/Finished.js",["70"],[],"export default function Finished(props) {\n\tconst termsArray = props.terms;\n\n\t//sleep for 1 second to allow time for the user to see the result\n\tsetTimeout(() => {\n\t\tdocument.addEventListener(\"keypress\", eventAcceptor, false);\n\t}, 1000);\n\n\tfunction eventAcceptor(e) {\n\t\tvar code = e.code;\n\t\tif (code === \"Enter\") {\n\t\t\tprops.setLearnCounter();\n\t\t\tdocument.removeEventListener(\"keypress\", eventAcceptor, false);\n\t\t}\n\t}\n\n\tconst congratsMessages = [\"Yay\", \"You did it\", \"Awsome\", \"Congrats\"];\n\tconst congratsEmojis = [\"🏆\", \"💯\", \"🎉\", \"👏\", \"👏\", \"👌\"];\n\n\treturn (\n\t\t<a className=\"block bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700 space-y-5\">\n\t\t\t<div className=\"py-10 flex bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700\">\n\t\t\t\t<h1 className=\"space-y-5 text-center m-auto text-5xl dark:text-white\">\n\t\t\t\t\t<b>{congratsMessages[Math.floor(Math.random() * congratsMessages.length)] + \" \" + congratsEmojis[Math.floor(Math.random() * congratsEmojis.length)]}</b>\n\t\t\t\t\t<p className=\"text-base dark:text-slate-400\">You successfully studied {termsArray.length} terms!</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tprops.setAppInput({learnMode: false, submittedSet: false, terms: \"\"});\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\tclassName=\"py-3 px-5 text-base font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\n\t\t\t\t\t>\n\t\t\t\t\t\tStudy a New Set\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tprops.setAppInput({learnMode: false, submittedSet: true, terms: termsArray});\n\t\t\t\t\t\t}}\n\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\tclassName=\"py-3 px-5 ml-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700\"\n\t\t\t\t\t>\n\t\t\t\t\t\tRestart This Set 🔄\n\t\t\t\t\t</button>\n\t\t\t\t</h1>\n\t\t\t</div>\n\t\t</a>\n\t);\n}\n","/Users/andrew/Desktop/CSML/dataChallenges/src/index.js",[],[],"/Users/andrew/Desktop/CSML/dataChallenges/src/App.js",["71","72"],[],"/Users/andrew/Desktop/CSML/dataChallenges/src/reportWebVitals.js",[],[],{"ruleId":"73","severity":1,"message":"74","line":59,"column":21,"nodeType":"75","messageId":"76","endLine":59,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":7,"column":8,"nodeType":"79","messageId":"80","endLine":7,"endColumn":19},{"ruleId":"81","severity":1,"message":"82","line":30,"column":3,"nodeType":"83","endLine":30,"endColumn":125},{"ruleId":"81","severity":1,"message":"82","line":21,"column":3,"nodeType":"83","endLine":21,"endColumn":125},{"ruleId":"84","severity":1,"message":"85","line":68,"column":7,"nodeType":"83","endLine":68,"endColumn":59},{"ruleId":"86","severity":1,"message":"87","line":70,"column":7,"nodeType":"83","endLine":70,"endColumn":94},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'PreviousMap' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property."]